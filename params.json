{"name":"Boethin.Net.DnsTools","tagline":"A DNS debugging library.","body":"Boethin.Net.DnsTools, a DNS debugging library.\r\n==============================================\r\n\r\nThe C# library includes tools for querying DNS servers and resolving DNS queries via UDP and TCP using IPv4 and IPv6.\r\n\r\n### The goals of the project\r\n\r\n  - Error recovery in DNS configurations.\r\n  - Experimental investigation of possibilities in the DNS.\r\n  - Development of ways to optimize client implementations.\r\n\r\n### The following specifications have been taken into consideration:\r\n  - [RFC 1035](http://tools.ietf.org/html/rfc1035) Domain Names - Implementation and Specification.\r\n  - [RFC 2181](http://tools.ietf.org/html/rfc2181) Clarifications to the DNS Specification.\r\n  - [RFC 3425](http://tools.ietf.org/html/rfc3425) Obsoleting IQUERY.\r\n  - [RFC 1996](http://tools.ietf.org/html/rfc1996) A Mechanism for Prompt Notification of Zone Changes (DNS NOTIFY)\r\n  - [RFC 3596](http://tools.ietf.org/html/rfc3596) DNS Extensions to Support IP Version 6 (AAAA RRs).\r\n  - [RFC 2782](http://tools.ietf.org/html/rfc2782) A DNS RR for specifying the location of services (SRV RRs).\r\n  - [RFC 3403](http://tools.ietf.org/html/rfc3403) Dynamic Delegation Discovery System (NAPTR RRs).\r\n  - [RFC 4408](http://tools.ietf.org/html/rfc4408) Sender Policy Framework (SPF RRs).\r\n\r\n### Future plans:\r\n  - Implementation of EDNS [RFC 2671](http://tools.ietf.org/html/rfc2671).\r\n  - Validation DNSSEC zones.\r\n  - Improving of caching mechanisms.\r\n  - Utilizing the resolver for consistency and existence tests.\r\n\r\nProject structure\r\n-----------------\r\n\r\n### Core projects\r\n\r\n##### *Boethin.Net.DnsTools.DnsClient*\r\n\r\nThis project contains a DNS client interface *IDnsClient* and a mapping of DNS data to a serializable class structure. The interface is implemented by two classes:\r\n\r\n   - *DnsUdpClient*: A UDP client, extending *System.Net.Sockets.UdpClient*.\r\n   - *DnsTcpClient*: A TCP client, extending *System.Net.Sockets.TcpClient*.\r\n\r\nThe client classes are implemented as extensions of the standard network clients provided by the .NET framework. This way the greatest possible flexibility is ensured with minimal implementation effort.\r\n\r\n##### *Boethin.Net.DnsTools.Resolution*\r\n\r\nThis project depends on the *DnsClient* project and contains an interactively controllable DNS resolver.\r\n\r\nThe resolver is serializable such that it's state can be saved after each iteration step. This way it's possible to implement an iterative step-by-step resolution (within a web application for example).\r\n\r\nThe mapping of IP addresses to ARPA domains for reverse resolution is implemeted by way of an extension of the *System.Net.IPAddress* class.\r\n\r\n### Additional testing projects\r\n\r\n##### *Boethin.Net.DnsTools.Tests.ClientApp*\r\n\r\nA WinForm application utilizing the DNS client.\r\n\r\n##### *Boethin.Net.DnsTools.Tests.ConsoleResolver*\r\n\r\nAn interactive console application providing iterative name resolution.\r\n\r\n(Open *Boethin.Net.DnsTools.Tests.sln* for accessing the test projects.)\r\n\r\n\r\nRemarks\r\n-------\r\n\r\n##### External dependencies\r\n\r\nThe resolver library contains a mirror of the IANA Root Hints File wich needs to be synchronized.\r\n- Source: [http://www.iana.org/domains/root/servers](http://www.iana.org/domains/root/servers)\r\n\r\n##### Compatibility considerations\r\n\r\n- The library is implemented in .NET 3.5. Both Visual Studio solutions (Boethin.Net.DnsTools.sln and Boethin.Net.DnsTools.Tests.sln) can be opened with Visual studio 2010 express.\r\n- The code is compatible with Mono JIT compiler 2.6.7.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}